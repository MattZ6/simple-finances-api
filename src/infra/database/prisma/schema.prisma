generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Error {
  id                      String   @id @default(uuid())
  exception_was_thrown_in String
  resource_url            String
  http_method             String
  stack                   String
  created_at              DateTime @default(now())

  @@map("errors")
}

model User {
  id         String   @id @default(uuid())
  name       String
  avatar_url String?
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  google_profile GoogleProfile?
  tokens         UserToken[]
  transactions   Transaction[]

  @@map("users")
}

model UserToken {
  id         String   @id @default(uuid())
  token      String   @unique
  user_id    String
  user       User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  expires_in DateTime
  created_at DateTime @default(now())
  updated_at DateTime @default(now()) @updatedAt

  @@map("user_tokens")
}

model GoogleProfile {
  user_id           String   @id
  user              User     @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  google_account_id String   @unique
  email             String
  avatar_url        String?
  created_at        DateTime @default(now())
  updated_at        DateTime @default(now()) @updatedAt

  @@map("google_profiles")
}

enum TransactionType {
  INCOME
  OUTCOME
}

model TransactionCategory {
  id          String           @id @default(uuid())
  title       String           @unique
  description String
  type        TransactionType?
  slug        String           @unique
  created_at  DateTime         @default(now())
  updated_at  DateTime         @default(now()) @updatedAt

  transactions Transaction[]

  @@map("transaction_categories")
}

model Transaction {
  id          String               @id @default(uuid())
  user_id     String
  user        User                 @relation(fields: [user_id], references: [id], onUpdate: Cascade, onDelete: Cascade)
  title       String
  value       Float
  date        DateTime
  type        TransactionType
  category_id String?
  category    TransactionCategory? @relation(fields: [category_id], references: [id], onUpdate: Cascade, onDelete: SetNull)
  created_at  DateTime             @default(now())
  updated_at  DateTime             @default(now()) @updatedAt

  @@map("transactions")
}
